From ed38110e6a9e13673d18d0461f25350889979f9a Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Wed, 27 Apr 2022 15:17:39 +0800
Subject: [PATCH 68/98] backend-drm: Stop disabling unused CRTCs by default

So that we can launch multiple weston instances for different monitors.

Set env "WESTON_DRM_MASTER" to take charge of all CRTCs again.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 libweston/backend-drm/drm-internal.h | 1 +
 libweston/backend-drm/drm.c          | 8 ++++++++
 libweston/backend-drm/kms.c          | 7 ++++---
 3 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/libweston/backend-drm/drm-internal.h b/libweston/backend-drm/drm-internal.h
index 14440ee..79f42d3 100644
--- a/libweston/backend-drm/drm-internal.h
+++ b/libweston/backend-drm/drm-internal.h
@@ -406,6 +406,7 @@ struct drm_backend {
 	int64_t last_resize_ms;
 	int64_t resize_freeze_ms;
 
+	bool master;
 	bool single_head;
 	bool head_fallback;
 	bool head_fallback_all;
diff --git a/libweston/backend-drm/drm.c b/libweston/backend-drm/drm.c
index 2734a79..2e96955 100644
--- a/libweston/backend-drm/drm.c
+++ b/libweston/backend-drm/drm.c
@@ -2558,6 +2558,10 @@ drm_output_detach_crtc(struct drm_output *output)
 
 	crtc->output = NULL;
 	output->crtc = NULL;
+
+	/* HACK: Do it here rather than in the kms.c for drm-master config */
+	drmModeSetCrtc(crtc->device->drm.fd,
+		       crtc->crtc_id, 0, 0, 0, NULL, 0, NULL);
 }
 
 static int
@@ -4836,6 +4840,10 @@ drm_backend_create(struct weston_compositor *compositor,
 	if (b == NULL)
 		return NULL;
 
+	buf = getenv("WESTON_DRM_MASTER");
+	if (buf && buf[0] == '1')
+		b->master = true;
+
 	buf = getenv("WESTON_DRM_SINGLE_HEAD");
 	if (buf && buf[0] == '1')
 		b->single_head = true;
diff --git a/libweston/backend-drm/kms.c b/libweston/backend-drm/kms.c
index ffbb155..a38fe88 100644
--- a/libweston/backend-drm/kms.c
+++ b/libweston/backend-drm/kms.c
@@ -1500,7 +1500,7 @@ drm_pending_state_apply_atomic(struct drm_pending_state *pending_state,
 		break;
 	}
 
-	if (device->state_invalid) {
+	if (device->state_invalid && b->master) {
 		struct weston_head *head_base;
 		struct drm_head *head;
 		struct drm_crtc *crtc;
@@ -1722,7 +1722,7 @@ drm_pending_state_apply(struct drm_pending_state *pending_state)
 		return drm_pending_state_apply_atomic(pending_state,
 						      DRM_STATE_APPLY_ASYNC);
 
-	if (device->state_invalid) {
+	if (device->state_invalid && b->master) {
 		/* If we need to reset all our state (e.g. because we've
 		 * just started, or just been VT-switched in), explicitly
 		 * disable all the CRTCs we aren't using. This also disables
@@ -1790,6 +1790,7 @@ int
 drm_pending_state_apply_sync(struct drm_pending_state *pending_state)
 {
 	struct drm_device *device = pending_state->device;
+	struct drm_backend *b = device->backend;
 	struct drm_output_state *output_state, *tmp;
 	struct drm_crtc *crtc;
 	int has_error = 0;
@@ -1798,7 +1799,7 @@ drm_pending_state_apply_sync(struct drm_pending_state *pending_state)
 		return drm_pending_state_apply_atomic(pending_state,
 						      DRM_STATE_APPLY_SYNC);
 
-	if (device->state_invalid) {
+	if (device->state_invalid && b->master) {
 		/* If we need to reset all our state (e.g. because we've
 		 * just started, or just been VT-switched in), explicitly
 		 * disable all the CRTCs we aren't using. This also disables
-- 
2.20.1

