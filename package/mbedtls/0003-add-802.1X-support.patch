From c51e688db39aaa3c4e04c0d410d943175d744282 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Thu, 1 Sep 2022 11:33:04 +0800
Subject: [PATCH 3/5] add 802.1X support

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 configs/config-thread.h        |  1 +
 include/mbedtls/config.h       | 10 +++++++
 include/mbedtls/ssl.h          | 29 +++++++++++++++++++
 include/mbedtls/ssl_internal.h |  9 ++++++
 library/ssl_msg.c              |  3 --
 library/ssl_tls.c              | 52 ++++++++++++++++++++++++++++++++++
 6 files changed, 101 insertions(+), 3 deletions(-)

diff --git a/configs/config-thread.h b/configs/config-thread.h
index de24158..c147476 100644
--- a/configs/config-thread.h
+++ b/configs/config-thread.h
@@ -49,6 +49,7 @@
 #define MBEDTLS_SSL_DTLS_ANTI_REPLAY
 #define MBEDTLS_SSL_DTLS_HELLO_VERIFY
 #define MBEDTLS_SSL_EXPORT_KEYS
+#define MBEDTLS_EAP_TLS_EXPORT_KEYS
 
 /* mbed TLS modules */
 #define MBEDTLS_AES_C
diff --git a/include/mbedtls/config.h b/include/mbedtls/config.h
index 6755eb2..d661c91 100644
--- a/include/mbedtls/config.h
+++ b/include/mbedtls/config.h
@@ -2004,6 +2004,16 @@
  */
 #define MBEDTLS_SSL_EXPORT_KEYS
 
+/**
+ * \def MBEDTLS_EAP_TLS_EXPORT_KEYS
+ *
+ * Enable support for exporting EAP_TLS keys as defined in rfc5216.
+ * This is required for 802.1X support.
+ *
+ * Comment this macro to disable support for EAP_TLS key export
+ */
+#define MBEDTLS_EAP_TLS_EXPORT_KEYS
+
 /**
  * \def MBEDTLS_SSL_SERVER_NAME_INDICATION
  *
diff --git a/include/mbedtls/ssl.h b/include/mbedtls/ssl.h
index 5064ec5..010e975 100644
--- a/include/mbedtls/ssl.h
+++ b/include/mbedtls/ssl.h
@@ -530,6 +530,18 @@ union mbedtls_ssl_premaster_secret
 extern "C" {
 #endif
 
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+/*
+ * Exported key type
+ */
+typedef enum
+{
+    TLS_KEY,    /* rfc5246 - default*/
+    EAP_TLS_KEY /* rfc5216 */
+}
+mbedtls_tls_key_t;
+#endif
+
 /*
  * SSL state machine
  */
@@ -1181,6 +1193,10 @@ struct mbedtls_ssl_config
                 const unsigned char[32], const unsigned char[32],
                 mbedtls_tls_prf_types );
     void *p_export_keys;            /*!< context for key export callback    */
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+    mbedtls_tls_key_t export_key_type;
+    unsigned char eap_tls_keyblk[128];
+#endif
 #endif
 
 #if defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)
@@ -2147,6 +2163,19 @@ void mbedtls_ssl_conf_session_tickets_cb( mbedtls_ssl_config *conf,
 #endif /* MBEDTLS_SSL_SESSION_TICKETS && MBEDTLS_SSL_SRV_C */
 
 #if defined(MBEDTLS_SSL_EXPORT_KEYS)
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+/**
+ * \brief           Set type of the TLS key to export.
+ *                  (Default: TLS_KEY as defined in rfc4346
+ *
+ * \note            See \c mbedtls_tls_key_t.
+ *
+ * \param conf      SSL configuration context
+ * \param export_key_type   Type of the key to be exported
+ */
+void mbedtls_ssl_conf_export_keys_type( mbedtls_ssl_config *conf,
+        mbedtls_tls_key_t export_key_type);
+#endif /* MBEDTLS_EAP_TLS_EXPORT_KEYS */
 /**
  * \brief           Configure key export callback.
  *                  (Default: none.)
diff --git a/include/mbedtls/ssl_internal.h b/include/mbedtls/ssl_internal.h
index 46ade67..f5e8527 100644
--- a/include/mbedtls/ssl_internal.h
+++ b/include/mbedtls/ssl_internal.h
@@ -132,6 +132,15 @@
 #define MBEDTLS_SSL_RETRANS_WAITING         2
 #define MBEDTLS_SSL_RETRANS_FINISHED        3
 
+/*
+ * Move the definition from mbedtls/library/ssl_msg.c
+ *
+ * Note: Used by mbedtls_ssl_write_record function in
+ * mbedtls/library/ssl_msg.c
+ */
+#define SSL_DONT_FORCE_FLUSH 0
+#define SSL_FORCE_FLUSH      1
+
 /*
  * Allow extra bytes for record, authentication and encryption overhead:
  * counter (8) + header (5) + IV(16) + MAC (16-48) + padding (0-256)
diff --git a/library/ssl_msg.c b/library/ssl_msg.c
index e47c538..ef8fa46 100644
--- a/library/ssl_msg.c
+++ b/library/ssl_msg.c
@@ -157,9 +157,6 @@ exit:
 }
 #endif /* MBEDTLS_SSL_RECORD_CHECKING */
 
-#define SSL_DONT_FORCE_FLUSH 0
-#define SSL_FORCE_FLUSH      1
-
 #if defined(MBEDTLS_SSL_PROTO_DTLS)
 
 /* Forward declarations for functions related to message buffering. */
diff --git a/library/ssl_tls.c b/library/ssl_tls.c
index 7badec5..f3efe98 100644
--- a/library/ssl_tls.c
+++ b/library/ssl_tls.c
@@ -707,6 +707,14 @@ static int tls_prf_generic( mbedtls_md_type_t md_type,
     md_len = mbedtls_md_get_size( md_info );
 
     tmp_len = md_len + strlen( label ) + rlen;
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+    /*
+     * EAP-TLS is using label: "client EAP encryption" (RFC 5216)
+     * while TLS is using "master secret" (RFC4346 and RFC5246)
+     * If EAP-TLS is supported, increase buffer by 8 bytes
+     */
+    tmp_len += 8;
+#endif
     tmp = mbedtls_calloc( 1, tmp_len );
     if( tmp == NULL )
     {
@@ -976,6 +984,9 @@ static int ssl_populate_transform( mbedtls_ssl_transform *transform,
                                    const unsigned char randbytes[64],
                                    int minor_ver,
                                    unsigned endpoint,
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+                                   unsigned char *eap_tls_keyblk,
+#endif
 #if !defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
                                    const
 #endif
@@ -1345,6 +1356,13 @@ static int ssl_populate_transform( mbedtls_ssl_transform *transform,
 #if defined(MBEDTLS_SSL_EXPORT_KEYS)
     if( ssl->conf->f_export_keys != NULL )
     {
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+        if ( ssl->conf->export_key_type == EAP_TLS_KEY && eap_tls_keyblk)
+            ssl->conf->f_export_keys( ssl->conf->p_export_keys,
+                                  master, eap_tls_keyblk,
+                                  0, 128, 0 );
+        else
+#endif /* MBEDTLS_EAP_TLS_EXPORT_KEYS */
         ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                   master, keyblk,
                                   mac_key_len, keylen,
@@ -1507,6 +1525,11 @@ static int ssl_populate_transform( mbedtls_ssl_transform *transform,
 #endif /* MBEDTLS_ZLIB_SUPPORT */
 
 end:
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+    if (eap_tls_keyblk)
+        mbedtls_platform_zeroize( eap_tls_keyblk, 128 ); // eap_tls_keyblk len
+#endif
+
     mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
     return( ret );
 }
@@ -1724,6 +1747,9 @@ int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
     int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
     const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
         ssl->handshake->ciphersuite_info;
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+    unsigned char eap_tls_keyblk[128];
+#endif
 
     MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 
@@ -1747,6 +1773,18 @@ int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
         return( ret );
     }
 
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+    if ( ssl->conf->export_key_type == EAP_TLS_KEY ) {
+        ret = ssl->handshake->tls_prf( ssl->session_negotiate->master, 48, "client EAP encryption",
+                              ssl->handshake->randbytes, 64, eap_tls_keyblk, 128 );
+        if( ret != 0 )
+        {
+            MBEDTLS_SSL_DEBUG_RET( 1, "eap_tls_prf", ret );
+            return( ret );
+        }
+    }
+#endif
+
     /* Swap the client and server random values:
      * - MS derivation wanted client+server (RFC 5246 8.1)
      * - key derivation wants server+client (RFC 5246 6.3) */
@@ -1777,6 +1815,9 @@ int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
                                   ssl->handshake->randbytes,
                                   ssl->minor_ver,
                                   ssl->conf->endpoint,
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+                                  eap_tls_keyblk,
+#endif
                                   ssl );
     if( ret != 0 )
     {
@@ -5034,6 +5075,14 @@ void mbedtls_ssl_conf_export_keys_ext_cb( mbedtls_ssl_config *conf,
     conf->f_export_keys_ext = f_export_keys_ext;
     conf->p_export_keys = p_export_keys;
 }
+
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+void mbedtls_ssl_conf_export_keys_type( mbedtls_ssl_config *conf,
+        mbedtls_tls_key_t export_key_type )
+{
+    conf->export_key_type=export_key_type;
+}
+#endif /* MBEDTLS_EAP_TLS_EXPORT_KEYS */
 #endif
 
 #if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
@@ -6652,6 +6701,9 @@ static int ssl_context_load( mbedtls_ssl_context *ssl,
                   p, /* currently pointing to randbytes */
                   MBEDTLS_SSL_MINOR_VERSION_3, /* (D)TLS 1.2 is forced */
                   ssl->conf->endpoint,
+#if defined(MBEDTLS_EAP_TLS_EXPORT_KEYS)
+                  NULL,
+#endif
                   ssl );
     if( ret != 0 )
         return( ret );
-- 
2.20.1

