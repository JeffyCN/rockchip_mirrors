From c0b997f588bbae0751ecb98f7a1061c95c0c353a Mon Sep 17 00:00:00 2001
From: Jiajian Wu <jair.wu@rock-chips.com>
Date: Wed, 31 May 2023 10:52:54 +0800
Subject: [PATCH 2/2] src: extra: New widgets inputbox

Signed-off-by: Jiajian Wu <jair.wu@rock-chips.com>
---
 lv_conf.h                                   |   2 +
 src/extra/themes/default/lv_theme_default.c |  18 ++
 src/extra/widgets/inputbox/lv_inputbox.c    | 209 ++++++++++++++++++++
 src/extra/widgets/inputbox/lv_inputbox.h    | 102 ++++++++++
 src/extra/widgets/lv_widgets.h              |   1 +
 5 files changed, 332 insertions(+)
 create mode 100644 src/extra/widgets/inputbox/lv_inputbox.c
 create mode 100644 src/extra/widgets/inputbox/lv_inputbox.h

diff --git a/lv_conf.h b/lv_conf.h
index e53f1a48f..cf0315c9c 100644
--- a/lv_conf.h
+++ b/lv_conf.h
@@ -535,6 +535,8 @@
 
 #define LV_USE_IMGBTN     1
 
+#define LV_USE_INPUTBOX   1
+
 #define LV_USE_KEYBOARD   1
 
 #define LV_USE_LED        1
diff --git a/src/extra/themes/default/lv_theme_default.c b/src/extra/themes/default/lv_theme_default.c
index 47392b0d1..85c6ac376 100644
--- a/src/extra/themes/default/lv_theme_default.c
+++ b/src/extra/themes/default/lv_theme_default.c
@@ -783,6 +783,19 @@ static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
 
 #if LV_USE_BTNMATRIX
     else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
+#if LV_USE_INPUTBOX
+        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_inputbox_class)) {
+            lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
+            lv_obj_add_style(obj, &styles->pad_gap, 0);
+            lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
+            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
+            lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
+            lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
+            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
+            lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
+            return;
+        }
+#endif
 #if LV_USE_MSGBOX
         if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_msgbox_class)) {
             lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
@@ -1105,6 +1118,11 @@ static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
     }
 #endif
 #if LV_USE_MSGBOX
+    else if(lv_obj_check_type(obj, &lv_inputbox_class)) {
+        lv_obj_add_style(obj, &styles->card, 0);
+        lv_obj_add_style(obj, &styles->msgbox_bg, 0);
+        return;
+    }
     else if(lv_obj_check_type(obj, &lv_msgbox_class)) {
         lv_obj_add_style(obj, &styles->card, 0);
         lv_obj_add_style(obj, &styles->msgbox_bg, 0);
diff --git a/src/extra/widgets/inputbox/lv_inputbox.c b/src/extra/widgets/inputbox/lv_inputbox.c
new file mode 100644
index 000000000..5b5184829
--- /dev/null
+++ b/src/extra/widgets/inputbox/lv_inputbox.c
@@ -0,0 +1,209 @@
+/**
+ * @file lv_inputbox.c
+ *
+ */
+
+/*********************
+ *      INCLUDES
+ *********************/
+#include "lv_inputbox.h"
+#if LV_USE_INPUTBOX
+
+#include "../../../misc/lv_assert.h"
+
+/*********************
+ *      DEFINES
+ *********************/
+#define LV_INPUTBOX_FLAG_AUTO_PARENT  LV_OBJ_FLAG_WIDGET_1        /*Mark that the parent was automatically created*/
+#define MY_CLASS    &lv_inputbox_class
+
+/**********************
+ *      TYPEDEFS
+ **********************/
+
+/**********************
+ *  STATIC PROTOTYPES
+ **********************/
+static void inputbox_close_click_event_cb(lv_event_t * e);
+
+/**********************
+ *  STATIC VARIABLES
+ **********************/
+const lv_obj_class_t lv_inputbox_class = {
+    .base_class = &lv_obj_class,
+    .width_def = LV_DPI_DEF * 2,
+    .height_def = LV_SIZE_CONTENT,
+    .instance_size = sizeof(lv_inputbox_t)
+};
+
+/**********************
+ *      MACROS
+ **********************/
+
+/**********************
+ *   GLOBAL FUNCTIONS
+ **********************/
+
+lv_obj_t * lv_inputbox_create(lv_obj_t * parent, const char * title, const char * txt, const char * btn_txts[],
+                            bool add_close_btn)
+{
+    LV_LOG_INFO("begin");
+    bool auto_parent = false;
+    if(parent == NULL) {
+        auto_parent = true;
+        parent = lv_obj_class_create_obj(&lv_msgbox_backdrop_class, lv_layer_top());
+        LV_ASSERT_MALLOC(parent);
+        lv_obj_class_init_obj(parent);
+        lv_obj_clear_flag(parent, LV_OBJ_FLAG_IGNORE_LAYOUT);
+        lv_obj_set_size(parent, LV_PCT(100), LV_PCT(100));
+    }
+
+    lv_obj_t * obj = lv_obj_class_create_obj(&lv_inputbox_class, parent);
+    LV_ASSERT_MALLOC(obj);
+    if(obj == NULL) return NULL;
+    lv_obj_class_init_obj(obj);
+    lv_inputbox_t * mbox = (lv_inputbox_t *)obj;
+
+    if(auto_parent) lv_obj_add_flag(obj, LV_INPUTBOX_FLAG_AUTO_PARENT);
+
+    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_WRAP);
+
+    bool has_title = title && strlen(title) > 0;
+
+    /*When a close button is required, we need the empty label as spacer to push the button to the right*/
+    if(add_close_btn || has_title) {
+        mbox->title = lv_label_create(obj);
+        lv_label_set_text(mbox->title, has_title ? title : "");
+        lv_label_set_long_mode(mbox->title, LV_LABEL_LONG_SCROLL_CIRCULAR);
+        if(add_close_btn) lv_obj_set_flex_grow(mbox->title, 1);
+        else lv_obj_set_width(mbox->title, LV_PCT(100));
+    }
+
+    if(add_close_btn) {
+        mbox->close_btn = lv_btn_create(obj);
+        lv_obj_set_ext_click_area(mbox->close_btn, LV_DPX(10));
+        lv_obj_add_event_cb(mbox->close_btn, inputbox_close_click_event_cb, LV_EVENT_CLICKED, NULL);
+        lv_obj_t * label = lv_label_create(mbox->close_btn);
+        lv_label_set_text(label, LV_SYMBOL_CLOSE);
+        const lv_font_t * font = lv_obj_get_style_text_font(mbox->close_btn, LV_PART_MAIN);
+        lv_coord_t close_btn_size = lv_font_get_line_height(font) + LV_DPX(10);
+        lv_obj_set_size(mbox->close_btn, close_btn_size, close_btn_size);
+        lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
+    }
+
+    mbox->content = lv_obj_class_create_obj(&lv_msgbox_content_class, obj);
+    lv_obj_set_flex_flow(mbox->content, LV_FLEX_FLOW_ROW_WRAP);
+
+    bool has_txt = txt && strlen(txt) > 0;
+    if(has_txt) {
+        mbox->text = lv_label_create(mbox->content);
+        lv_label_set_text(mbox->text, txt);
+        lv_label_set_long_mode(mbox->text, LV_LABEL_LONG_WRAP);
+        lv_obj_set_width(mbox->text, lv_pct(100));
+    }
+
+    mbox->text_area = lv_textarea_create(mbox->content);
+    lv_obj_set_width(mbox->text_area, lv_pct(100));
+    lv_textarea_set_text(mbox->text_area, "");
+    lv_textarea_set_password_mode(mbox->text_area, true);
+    lv_textarea_set_one_line(mbox->text_area, true);
+
+    if(btn_txts) {
+        mbox->btns = lv_btnmatrix_create(obj);
+        lv_btnmatrix_set_map(mbox->btns, btn_txts);
+        lv_btnmatrix_set_btn_ctrl_all(mbox->btns, LV_BTNMATRIX_CTRL_CLICK_TRIG | LV_BTNMATRIX_CTRL_NO_REPEAT);
+
+        uint32_t btn_cnt = 0;
+        while(btn_txts[btn_cnt] && btn_txts[btn_cnt][0] != '\0') {
+            btn_cnt++;
+        }
+
+        const lv_font_t * font = lv_obj_get_style_text_font(mbox->btns, LV_PART_ITEMS);
+        lv_coord_t btn_h = lv_font_get_line_height(font) + LV_DPI_DEF / 10;
+        lv_obj_set_size(mbox->btns, btn_cnt * (2 * LV_DPI_DEF / 3), btn_h);
+        lv_obj_set_style_max_width(mbox->btns, lv_pct(100), 0);
+        lv_obj_add_flag(mbox->btns, LV_OBJ_FLAG_EVENT_BUBBLE);    /*To see the event directly on the message box*/
+    }
+
+    return obj;
+}
+
+
+lv_obj_t * lv_inputbox_get_title(lv_obj_t * obj)
+{
+    LV_ASSERT_OBJ(obj, MY_CLASS);
+    lv_inputbox_t * mbox = (lv_inputbox_t *)obj;
+    return mbox->title;
+}
+
+lv_obj_t * lv_inputbox_get_close_btn(lv_obj_t * obj)
+{
+    LV_ASSERT_OBJ(obj, MY_CLASS);
+    lv_inputbox_t * mbox = (lv_inputbox_t *)obj;
+    return mbox->close_btn;
+}
+
+lv_obj_t * lv_inputbox_get_text(lv_obj_t * obj)
+{
+    LV_ASSERT_OBJ(obj, MY_CLASS);
+    lv_inputbox_t * mbox = (lv_inputbox_t *)obj;
+    return mbox->text;
+}
+
+lv_obj_t * lv_inputbox_get_text_area(lv_obj_t * obj)
+{
+    LV_ASSERT_OBJ(obj, MY_CLASS);
+    lv_inputbox_t * mbox = (lv_inputbox_t *)obj;
+    return mbox->text_area;
+}
+
+lv_obj_t * lv_inputbox_get_content(lv_obj_t * obj)
+{
+    LV_ASSERT_OBJ(obj, MY_CLASS);
+    lv_inputbox_t * mbox = (lv_inputbox_t *)obj;
+    return mbox->content;
+}
+
+lv_obj_t * lv_inputbox_get_btns(lv_obj_t * obj)
+{
+    LV_ASSERT_OBJ(obj, MY_CLASS);
+    lv_inputbox_t * mbox = (lv_inputbox_t *)obj;
+    return mbox->btns;
+}
+
+uint16_t lv_inputbox_get_active_btn(lv_obj_t * mbox)
+{
+    lv_obj_t * btnm = lv_inputbox_get_btns(mbox);
+    return lv_btnmatrix_get_selected_btn(btnm);
+}
+
+const char * lv_inputbox_get_active_btn_text(lv_obj_t * mbox)
+{
+    lv_obj_t * btnm = lv_inputbox_get_btns(mbox);
+    return lv_btnmatrix_get_btn_text(btnm, lv_btnmatrix_get_selected_btn(btnm));
+}
+
+void lv_inputbox_close(lv_obj_t * mbox)
+{
+    if(lv_obj_has_flag(mbox, LV_INPUTBOX_FLAG_AUTO_PARENT)) lv_obj_del(lv_obj_get_parent(mbox));
+    else lv_obj_del(mbox);
+}
+
+void lv_inputbox_close_async(lv_obj_t * dialog)
+{
+    if(lv_obj_has_flag(dialog, LV_INPUTBOX_FLAG_AUTO_PARENT)) lv_obj_del_async(lv_obj_get_parent(dialog));
+    else lv_obj_del_async(dialog);
+}
+
+/**********************
+ *   STATIC FUNCTIONS
+ **********************/
+
+static void inputbox_close_click_event_cb(lv_event_t * e)
+{
+    lv_obj_t * btn = lv_event_get_target(e);
+    lv_obj_t * mbox = lv_obj_get_parent(btn);
+    lv_inputbox_close(mbox);
+}
+
+#endif /*LV_USE_INPUTBOX*/
diff --git a/src/extra/widgets/inputbox/lv_inputbox.h b/src/extra/widgets/inputbox/lv_inputbox.h
new file mode 100644
index 000000000..bd3f2b069
--- /dev/null
+++ b/src/extra/widgets/inputbox/lv_inputbox.h
@@ -0,0 +1,102 @@
+/**
+ * @file lv_mbox.h
+ *
+ */
+
+#ifndef LV_INPUTBOX_H
+#define LV_INPUTBOX_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*********************
+ *      INCLUDES
+ *********************/
+#include "../../../lvgl.h"
+
+#if LV_USE_INPUTBOX
+
+/*Testing of dependencies*/
+#if LV_USE_BTNMATRIX == 0
+#error "lv_mbox: lv_btnm is required. Enable it in lv_conf.h (LV_USE_BTNMATRIX  1) "
+#endif
+
+#if LV_USE_LABEL == 0
+#error "lv_mbox: lv_label is required. Enable it in lv_conf.h (LV_USE_LABEL  1) "
+#endif
+
+/*********************
+ *      DEFINES
+ *********************/
+
+/**********************
+ *      TYPEDEFS
+ **********************/
+
+typedef struct {
+    lv_obj_t obj;
+    lv_obj_t * title;
+    lv_obj_t * close_btn;
+    lv_obj_t * content;
+    lv_obj_t * text;
+    lv_obj_t * text_area;
+    lv_obj_t * btns;
+} lv_inputbox_t;
+
+extern const lv_obj_class_t lv_inputbox_class;
+extern const lv_obj_class_t lv_inputbox_content_class;
+extern const lv_obj_class_t lv_inputbox_backdrop_class;
+
+/**********************
+ * GLOBAL PROTOTYPES
+ **********************/
+
+/**
+ * Create a message box object
+ * @param parent        pointer to parent or NULL to create a full screen modal message box
+ * @param title         the title of the message box
+ * @param txt           the text of the message box
+ * @param btn_txts      the buttons as an array of texts terminated by an "" element. E.g. {"btn1", "btn2", ""}
+ * @param add_close_btn true: add a close button
+ * @return              pointer to the message box object
+ */
+lv_obj_t * lv_inputbox_create(lv_obj_t * parent, const char * title, const char * txt, const char * btn_txts[],
+                            bool add_close_btn);
+
+lv_obj_t * lv_inputbox_get_title(lv_obj_t * obj);
+
+lv_obj_t * lv_inputbox_get_close_btn(lv_obj_t * obj);
+
+lv_obj_t * lv_inputbox_get_text(lv_obj_t * obj);
+
+lv_obj_t * lv_inputbox_get_text_area(lv_obj_t * obj);
+
+lv_obj_t * lv_inputbox_get_content(lv_obj_t * obj);
+
+lv_obj_t * lv_inputbox_get_btns(lv_obj_t * obj);
+
+/**
+ * Get the index of the selected button
+ * @param mbox message box object
+ * @return     index of the button (LV_BTNMATRIX_BTN_NONE: if unset)
+ */
+uint16_t lv_inputbox_get_active_btn(lv_obj_t * mbox);
+
+const char * lv_inputbox_get_active_btn_text(lv_obj_t * mbox);
+
+void lv_inputbox_close(lv_obj_t * mbox);
+
+void lv_inputbox_close_async(lv_obj_t * mbox);
+
+/**********************
+ *      MACROS
+ **********************/
+
+#endif /*LV_USE_INPUTBOX*/
+
+#ifdef __cplusplus
+} /*extern "C"*/
+#endif
+
+#endif /*LV_INPUTBOX_H*/
diff --git a/src/extra/widgets/lv_widgets.h b/src/extra/widgets/lv_widgets.h
index 114181022..af401c6e7 100644
--- a/src/extra/widgets/lv_widgets.h
+++ b/src/extra/widgets/lv_widgets.h
@@ -18,6 +18,7 @@ extern "C" {
 #include "calendar/lv_calendar_header_arrow.h"
 #include "calendar/lv_calendar_header_dropdown.h"
 #include "chart/lv_chart.h"
+#include "inputbox/lv_inputbox.h"
 #include "keyboard/lv_keyboard.h"
 #include "list/lv_list.h"
 #include "menu/lv_menu.h"
-- 
2.25.1

